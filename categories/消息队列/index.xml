<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>消息队列 on 图拉国营噄茶馆</title>
    <link>https://winterorch.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link>
    <description>Recent content in 消息队列 on 图拉国营噄茶馆</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 04 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://winterorch.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RabbitMQ - 基础知识</title>
      <link>https://winterorch.github.io/p/rabbitmq_introduction/</link>
      <pubDate>Sun, 04 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winterorch.github.io/p/rabbitmq_introduction/</guid>
      <description>示例为 Spring AMQP 中 RabbitMQ 的使用。
 Spring AMQP 官方文档： https://docs.spring.io/spring-amqp/docs/current/reference/html/
 Exchange Types （交换器类型）   fanout
最快的路由规则，Exchange 将所有接收到消息发送导与其绑定的所有队列中，不做任何判断操作，即使绑了路由键也会直接无视，常用来广播消息/** * Fanout */ @Bean public FanoutExchange fanoutExc() { return new FanoutExchange(FANOUT_EXCHANGE); } @Bean public Binding fanoutBinding1() { return BindingBuilder.bind(topicQueue1()).to(fanoutExc()); } @Bean public Binding fanoutBinding2() { return BindingBuilder.bind(topicQueue2()).to(fanoutExc()); }   direct
将消息路由到 BindingKey 与 RoutingKey 完全匹配的队列中，常用来将有优先级的任务发到对应队列，得到更多处理资源  topic
将消息路由到 BindingKey 和 RoutingKey 相匹配的队列中，但这里的匹配规则有些不同，它约定：
 RoutingKey 为一个点号 . 分隔的字符串（被点号 . 分隔开的每一段独立的字符串称为一个单词），如 com.</description>
    </item>
    
  </channel>
</rss>
