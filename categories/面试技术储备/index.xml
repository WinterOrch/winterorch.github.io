<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面试技术储备 on 图拉国营噄茶馆</title>
    <link>https://winterorch.github.io/categories/%E9%9D%A2%E8%AF%95%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/</link>
    <description>Recent content in 面试技术储备 on 图拉国营噄茶馆</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 11 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://winterorch.github.io/categories/%E9%9D%A2%E8%AF%95%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java - JVM 字符串</title>
      <link>https://winterorch.github.io/p/java-jvm-string_pool/</link>
      <pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winterorch.github.io/p/java-jvm-string_pool/</guid>
      <description>大部分内容来源这篇美团的文章：https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html，原文非常有深度，这里只捡了一些比较浅的东西出来
JDK6到7的字符串常量池出现了很大变化，为了防止绕晕，这里只拿了7以后的情况出来
   直接用双引号声明的 String 对象直接存到常量池
  用 intern 方法会从字符串常量池查询当前字符串是否存在，若不存在则将当前字符串放入常量池
  new 一个字符串出来最多会生成两个对象
 字符串常量池中的引用对象 Java Heap 中的String对象  当然，如果常量池中原本已经存在了被引用对象，则只会多生成一个对象
  字符串常量池 字符串常量池的主体是一个 StringTable 。
HotSpot VM中使用全局表StringTable记录interned string，StringTable 的 intern 方法类似 HashMap ，本质是HashSet&amp;lt;String&amp;gt;，但不能自动扩容，（JDK6）默认大小 1009，（JDK7）通过-XX:StringTableSize=99991参数指定，默认大小 60013。StringTable只存储对String实例的引用。
 加载字节码文件时，常量（&amp;quot;&amp;quot;圈起来的就是字符串常量）会被加载到运行时常量池 (Runtime Constant Pool) 中，字符串此时只有 CONSTANT_Utf8 ，采用 Lazy-Init ，因此未成为 Java 对象，运行到对应位置再进行对象加载。  类加载阶段
HotSpot VM 在类加载阶段，JVM会创建常量池中的字符串对象实例，但这一过程是惰性的，加载时仅将字面量放入类的运行时常量池，即 CONSTANT_Utf8，而 CONSTANT_String 还没有，也不会进入字符串常量池。（当然静态变量会直接被指定初始值，也就会创建字符串对象，同时保存引用到字符串常量池）
intern() JDK7中，intern() 方法将在字符串池中保存堆中的引用并返回（如果已经有则直接返回该引用）。对执行方法的对象本身不会造成任何影响，该指哪指哪。以下为例：
String s3 = new String(&amp;#34;1&amp;#34;) + new String(&amp;#34;1&amp;#34;); s3.</description>
    </item>
    
    <item>
      <title>Java - JVM 问题集合 (下)</title>
      <link>https://winterorch.github.io/p/java-jvm-questions_2/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winterorch.github.io/p/java-jvm-questions_2/</guid>
      <description>内存、对象、JVM优化相关问题 指令重排序与 happens-before 原则  https://www.jianshu.com/p/b9186dbebe8e
 问题的起因还是指令重排序，重排序之所以存在是因为有多级缓存，线程所作变更先在寄存器或本地缓存完成，然后拷贝到主存以跨越内存栅栏（即完成工作内存到主存间的拷贝动作），跨越序列或顺序称为happens-before。仅当写操作线程先跨越内存栅栏，读线程后跨越内存栅栏，写操作线程所作变更才对其它线程可见。
 程序次序规则： 在一个单独的线程中，按照程序代码的执行流顺序，（时间上）先执行的操作happen—before（时间上）后执行的操作 （同一个线程中前面的所有写操作对后面的操作可见） 管理锁定规则：一个unlock操作happen—before后面（时间上的先后顺序）对同一个锁的lock操作。 （如果线程1解锁了monitor a，接着线程2锁定了a，那么，线程1解锁a之前的写操作都对线程2可见（线程1和线程2可以是同一个线程）） volatile变量规则：对一个volatile变量的写操作happen—before后面（时间上）对该变量的读操作。 （如果线程1写入了volatile变量v（临界资源），接着线程2读取了v，那么，线程1写入v及之前的写操作都对线程2可见（线程1和线程2可以是同一个线程）） 线程启动规则：Thread.start()方法happen—before调用用start的线程前的每一个操作。 （假定线程A在执行过程中，通过执行ThreadB.start()来启动线程B，那么线程A对共享变量的修改在接下来线程B开始执行前对线程B可见。注意：线程B启动之后，线程A在对变量修改线程B未必可见。） 线程终止规则：线程的所有操作都happen—before对此线程的终止检测，可以通过Thread.join（）方法结束、Thread.isAlive（）的返回值等手段检测到线程已经终止执行。 (线程t1写入的所有变量，在任意其它线程t2调用t1.join()，或者t1.isAlive() 成功返回后，都对t2可见。) 线程中断规则：对线程interrupt()的调用 happen—before 发生于被中断线程的代码检测到中断时事件的发生。 (线程t1写入的所有变量，调用Thread.interrupt()，被打断的线程t2，可以看到t1的全部操作) 对象终结规则：一个对象的初始化完成（构造函数执行结束）happen—before它的finalize（）方法的开始。 (对象调用finalize()方法时，对象初始化完成的任意操作，同步到全部主存同步到全部cache。) 传递性：如果操作A happen—before操作B，操作B happen—before操作C，那么可以得出A happen—before操作C。   内存泄漏 JVM通过引用计数法和可达性分析算法来判断对象是否可以被GC，对象长时间没有被GC一般是JVM误以为对象还在引用中，无法回收，即长期存活对象引用短期存活对象，常见的情况包括：
 静态集合类（短生命周期对象）被长生命周期持有引用 各种连接（数据库、网络连接、IO）没有线性关闭，造成对象无法被回收 变量定义作用范围过大 内部类持有外部类，内部类长期被持有，导致外部类对象无法被回收 哈希表中，如果对象哈希值与最初存入时不同，则会导致找不到对象结果，造成泄漏 一些数据结构，如手写栈，在栈不断增长、收缩后，如果不手工清空（引用置null），弹出对象有可能不被GC，造成隐蔽的内存泄漏 缓存结构中，有些对象写入后很可能就再也没有被删除或使用，造成缓存泄漏。WeakHashMap 就是为此诞生的，没有除自身外其它引用的值会被丢弃 监听器和回调，如果注册后没有显示取消就会积聚起来，比较简单的解决方法也是使用弱引用  因此总结下来，防止内存泄漏的办法包括：避免长期存活对象持有不必要的短期对象引用；不使用资源即时回收，尤其是连接、手工数据结构中；难以判断是否可以回收的缓存资源，可以通过弱引用防止内存泄漏。
 Java 中的四种引用类型 不同引用类型体现为对象不同的可达性状态和对垃圾收集的影响。
 强引用就是最常见引用，垃圾收集器不会处理强引用指向的对象，但只要超过了引用的作用域，或显式地赋值为null就可以被回收 软引用相对强引用弱化一些，只有JVM认为内存不足（由JVM进行判定，不同JVM不同模式下对剩余空间的考量不同）时才会取试图回收软引用指向对象，因此可以用于缓存 弱引用指向对象完全不能从GC豁免，仅提供访问在弱引用状态下对象的途径，可以用来维护非强制的映射关系，如果还在就获取，否则重现实例化，也可以用于缓存 虚引用不能被用来访问对象，仅提供确保对象被finalize后做某些事的机制，比如 Post-Mortem 清理机制，Cleaner，监控对象的创建和销毁  引用的可达性可以进行流转，除了虚引用外的引用都可以通过get方法获取原有对象，从而重新指向强引用，人为改变对象的可达性状态。
但是如果错误地保持了强引用，那对象就没有机会变回弱引用可达性状态了，就会产生内存泄露。
 Native 关键字 用于告诉 JVM 调用的是本地 C/C++ 方法，因此不能 abstract。使用 JNI 加载动态或静态库时会需要用到这个方法。常见的如 hashCode() 、NIO 中 epoll 相关的内核操作都需要调用本地方法。</description>
    </item>
    
    <item>
      <title>Java - JVM 问题集合 (上)</title>
      <link>https://winterorch.github.io/p/java-jvm-questions_1/</link>
      <pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winterorch.github.io/p/java-jvm-questions_1/</guid>
      <description>JVM 内存结构、类加载相关问题 HotSpot 是什么 使用最广泛的 JVM，OpenJDK SunJDK 的 JVM。最早不是 Java 的虚拟机，在 JIT 方面具有一些先进的理念，被 SUN 收购。
 堆和栈区别是什么 个人理解，不一定全面：
   堆 栈     公有 线程私有   存放绝大多数对象实例、数组 存放局部变量表、操作数栈、动态链接、方法出口等   GC的主要场所 不需要GC，栈帧随方法调用结束而被弹出   生老病死与JVM紧密相关 生老病死与线程、函数调用紧密相关   不能动态扩容 可以通过配置动态扩容     哪块内存区不会OOM 公有部分： 堆，会OOM；方法区，虽然搬到了原生内存上，但还是有可能OOM的；JVM外的直接内存，肯定是可能OOM的。因此公有区全部有可能OOM。
线程私有部分： 本地方法栈，为 Native 方法服务，也有OOM可能；虚拟机栈，OOM常客，允许动态扩容时会OOM，不允许则会 OverFlow，因此是会OOM的；程序寄存器，唯一不会出现OOM的区域，就是它。
 一个线程OOM后，其它线程能否运行 无论哪种OOM，一个线程OOM后，所占据内存资源会被GC全部释放。无论是线程共享的堆内存，还是不共享的栈内存。
因此，一个线程的OOM不会影响到其它线程运行，即使主线程抛异常退出，子线程仍能继续，除非子线程是主线程的守护线程。
 对象一定是在堆上分配的吗 不一定。JVM通过逃逸分析，能够分析新对象的适用范围，以此确定是否要将对象分配到堆上，对于没有逃逸出方法的对象，很可能会被优先在栈上进行分配。
 其实就像我们平常用Spring，有必要将所有对象都注册成Bean吗？肯定没必要，JVM也不傻，并非所有对象都会分配到堆上，毕竟GC也是有开销的。
  为什么说一次编译，处处执行 两次编译机制，第一次由编译器编译成字节码，第二次由JVM转换到机器码，实际上是解释执行机制，解释工作由本地JVM完成，JVM担任了本地向导的责任，因此不是“处处执行”，是有本地向导，装了JVM的地方执行。</description>
    </item>
    
    <item>
      <title>Redis - Spring Data Redis 中的 Transaction 与 Pipeline</title>
      <link>https://winterorch.github.io/p/redis-spring_trans-pipeline/</link>
      <pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winterorch.github.io/p/redis-spring_trans-pipeline/</guid>
      <description>Redis 提供事务(Transaction)和管道(Pipeline)，两个概念都不复杂，可以对比来看，管道可以广泛用于提升 Redis 读写效率。
Redis Transactions Redis 原本通过 multi exec 和 discard 指令执行事务。RedisTemplate&amp;lt;&amp;gt; 本身提供三个同名方法来支持事务，但是 RedisTemplate 本身封装程度高，不能保证这种事务定义下的所有操作在同一次 Redis 连接中被执行。
因此，作为一种封装度更低的替代，Spring Data Redis 提供 SessionCallback 来确保多个操作在同一次 Redis 链接中进行。
//execute a transaction List&amp;lt;Object&amp;gt; txResults = redisTemplate.execute(new SessionCallback&amp;lt;List&amp;lt;Object&amp;gt;&amp;gt;() { public List&amp;lt;Object&amp;gt; execute(RedisOperations operations) throws DataAccessException { operations.multi(); operations.opsForSet().add(&amp;#34;key&amp;#34;, &amp;#34;value1&amp;#34;); // This will contain the results of all operations in the transaction  return operations.exec(); } }); System.out.println(&amp;#34;Number of items added to set: &amp;#34; + txResults.</description>
    </item>
    
    <item>
      <title>Netty - 基础知识</title>
      <link>https://winterorch.github.io/p/netty_basic/</link>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winterorch.github.io/p/netty_basic/</guid>
      <description>NIO 与 AIO 模型 NIO（一般用同步非阻塞模式，如果阻塞就是 BIO 了）：服务器实现模式为一个请求一个线程，客户端发送连接请求全部注册到多路复用器上，多路复用器轮询到连接有 I/O 请求时才启动一个线程进行处理（解决了连接多而 I/O 少时资源占用问题）。
 NIO模型 
AIO（异步非阻塞）：服务器实现模式为一个有效请求一个线程，客户端I/O请求由OS先完成再通知服务器应用启动线程进行处理。
那么，为什么 Netty 选择 NIO 模型呢？
 由于 UNIX 系统上 AIO 不成熟，底层仍然使用 EPOLL，没有很好实现 AIO，且 JDK 加了一层封装，因此实际速度并不比 NIO (epoll) 快。
Netty 整体架构为 Reactor 模型，AIO 为 Proactor 模型，整合起来复杂且冗余度高。
AIO 接收数据需要预分配内存，NIO 接收时才分配。AIO 对连接数量高但流量小的情况内存浪费大。
 Netty常见应用场景   作为 RPC 框架的网络通信工具
分布式系统不同服务节点之间相互调用需要 RPC 框架
  实现简单的 HTTP 服务器
  实现即时通讯系统
  实现消息推动系统
  扩展：Java NIO  Selector</description>
    </item>
    
    <item>
      <title>Redis - 常用数据类型</title>
      <link>https://winterorch.github.io/p/redis-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winterorch.github.io/p/redis-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>以下示例代码部分源自 [小专栏] 剖析面试最常见问题之Redis .
type name	#查看当前 key 的类型  String string 数据结构是简单的 key-value 类型。虽然 Redis 是用 C 语言写的，但是 Redis 并没有使用 C 的字符串表示，而是自己构建了一种 简单动态字符串（simple dynamic string，SDS）。相比于 C 的原生字符串，Redis 的 SDS 不光可以保存文本数据还可以保存二进制数据，并且获取字符串长度复杂度为 O(1)（C 字符串为 O(N)）,除此之外,Redis 的 SDS API 是安全的，不会造成缓冲区溢出。
 常用命令: set,get,strlen,exists,dect,incr,setex 等等 应用场景 ：大多数需要缓存的场景、需要计数的场景，比如用户的访问次数、热点文章的点赞转发数量等等  127.0.0.1:6379&amp;gt; set key value #设置 key-value 类型的值 OK 127.0.0.1:6379&amp;gt; get key # 根据 key 获得对应的 value &amp;#34;value&amp;#34; 127.0.0.1:6379&amp;gt; exists key # 判断某个 key 是否存在 (integer) 1 127.</description>
    </item>
    
    <item>
      <title>Redis - 面试常见问题</title>
      <link>https://winterorch.github.io/p/redis-common_questions/</link>
      <pubDate>Tue, 29 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winterorch.github.io/p/redis-common_questions/</guid>
      <description>常见的内存数据库包括 Memcached 和 Redis。后者相较之下在 k/v 类型数据基础上提供了 list, set, zset, hash 等数据结构存储，并且可扩展性强，能够通过插件增加更多；同时具有容灾机制，支持数据持久化，也有原生集群模式，支持发布订阅模型、Lua 脚本、事务；并且支持更多编程语言，单线程模型更加高效。总而言之功能很强，应用很广。
简要介绍 Redis 是用 C 开发的内存数据库，非关系型数据库，读写速度快，广泛应用于缓存，也可以做分布式锁、消息队列。
 Redis6.0 之前都是单线程处理，仅在4.0增加了对大键值对删除操作的“异步处理” 服务器内存使用完之后，将不用的数据存到磁盘上 过期数据的删除策略包括惰性删除与定期删除  缓存的作用
访问数据库从硬盘中读取，过程较慢。如果用户访问数据为高频数据且不会经常改变，则可以存在缓存中，速度快。
 删除策略和内存淘汰机制   惰性删除
只在取出 key 的时候才对数据进行过期检查。CPU负担小，但会残留很多过期 key
  定期删除
周期性取一批 key 执行删除过期 key 操作，通过限制删除操作执行时长和频率来减少删除操作对 CPU 影响
  删除策略并不能清理所有过期 key ，过期 key 还需要内存淘汰机制解决。
除了缓解内存消耗，设置过期时间也可以用于满足业务需要，比如验证码、登录Token的有效时间。
内存淘汰机制跟据从中挑选淘汰数据的数据集不同，分为三大类：
  从已设置过期时间的数据集中 volatile
  volatile-lru (least recently used)
移除最近最少使用的 key
  volatile-ttl
移除将要过期的数据
  volatile-random</description>
    </item>
    
    <item>
      <title>Spring - 依赖注入注解的区分</title>
      <link>https://winterorch.github.io/p/spring-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%8C%BA%E5%88%86/</link>
      <pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winterorch.github.io/p/spring-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%8C%BA%E5%88%86/</guid>
      <description>Spring 支持的依赖注入有 @Autowired @Resource @Inject 三种
@Autowired 来自 org.springframwork.beans.factory.annotation.Autowired ，装配顺序为：
 按 type 在上下文中查找匹配的 bean 如果有多个 bean，则按照 name 进行匹配  如有 @Qualifier ，则按指定的 name 进行匹配 如没有，则按变量名进行匹配   匹配不到就报错  @Autowired(required=false) 则注入失败不抛异常
@Inject Spring 环境下和 @Autowired 相同，都依赖 AutowiredAnnotationBeanPostProcess 进行处理，但不能 (required=false)。@Inject 由 JSR-330 定义，可以切换到谷歌的 DI 框架——Guice。
@Inject 在 Java EE 包内，SE 环境需要单独引入。
@Resource JSR-250 定义。在 CommonAnnotationBeanPostProcessor 实现处理。同样有 name 和 type。装配顺序：
 如同时指定 name 和 type ，从上下文找到唯一匹配 bean 进行装配，找不到抛异常 如指定 name ，则到上下文找 id 匹配的 bean 进行装配，找不到抛异常 如指定 type ，则到上下文找类型匹配的唯一 bean 进行装配，找不到或找到不唯一都会抛异常 如果都没有指定，则默认按 byName 方式装配，找不到再按 byType 进行装配   IDEA 使用 @Autowired 时很常见警告 Field injection is not recommended。</description>
    </item>
    
    <item>
      <title>Spring - 常用注释</title>
      <link>https://winterorch.github.io/p/spring-%E5%B8%B8%E7%94%A8%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winterorch.github.io/p/spring-%E5%B8%B8%E7%94%A8%E6%B3%A8%E9%87%8A/</guid>
      <description>首先，在 Spring 4.X 之后（不用 Spring Boot 的话）使用注释需要添加 aop 依赖。虽然不需要这么做了，还是有助于了解 Spring Boot 到底为我们做了什么。
&amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aop --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-aop&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{springframework.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 而且需要在 XML 中添加约束并在 context 中配置扫描范围。
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:context=&amp;#34;http://www.springframework.org/schema/context&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&amp;#34;&amp;gt; &amp;lt;context:annotation-config/&amp;gt; &amp;lt;/beans&amp;gt; 配置扫描范围
&amp;lt;!--指定注解扫描包--&amp;gt; &amp;lt;context:component-scan base-package=&amp;#34;com.yourpackage&amp;#34;/&amp;gt; 接下来按类别整理一些最常用的注释。
Bean 的扫描   @ComponentScan
   @ComponentScan：通过注释方式配置扫描范围，将其下的 @Component 组件（包括@Controller、@Service、@Repository）纳入 IOC 容器. 只能作用于配置类，且 Spring Boot 的入口类不能被纳入到扫描范围中.
 Spring Boot 默认的扫描范围是启动类所在包开始，当前包及子包下的所有文件
 @Configuration @ComponentScan(&amp;#34;cc.mrbird.demo&amp;#34;) public class WebConfig { }  可以通过 excludeFilters 来排除一些组件的扫描，通过 @Filter 注释完成</description>
    </item>
    
    <item>
      <title>计算机网络 - 传输层</title>
      <link>https://winterorch.github.io/p/computer_network-transport_layer/</link>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winterorch.github.io/p/computer_network-transport_layer/</guid>
      <description>网络层只把分组发送到目的主机，但是真正通信的并不是主机而是主机中的进程。传输层提供了进程间的逻辑通信，传输层向高层用户屏蔽了下面网络层的核心细节，使应用程序看起来像是在两个传输层实体之间有一条端到端的逻辑通信信道。
 TCP 与 UDP 协议区别     连接 传输可靠性 传输形式 传输效率 所需资源 应用场景 首部字节     TCP 面向连接 可靠 字节流 低 多 要求数据可靠性 20 - 60   UDP 无连接 不可靠 数据报文段 高 少 要求通信效率 8     TCP（Transmission Control Protocol） TCP 提供面向连接的服务。在传送数据之前必须先建立连接，数据传送结束后要释放连接。 TCP 不提供广播或多播服务。由于 TCP 要提供可靠的，面向连接的传输服务（TCP的可靠体现在TCP在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制，在数据传完后，还会断开连接用来节约系统资源），这一难以避免增加了许多开销，如确认，流量控制，计时器以及连接管理等。这不仅使协议数据单元的首部增大很多，还要占用许多处理机资源。TCP 一般用于文件传输、发送和接收邮件、远程登录等场景。
 
  序号 ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。
  确认号 ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。</description>
    </item>
    
    <item>
      <title>计算机网络 - 应用层</title>
      <link>https://winterorch.github.io/p/computer_network-application_layer/</link>
      <pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winterorch.github.io/p/computer_network-application_layer/</guid>
      <description>常用端口及协议    应用 协议 端口号 传输层 备注     域名解析 DNS 53 UDP/TCP 长度超过 512 字节时使用 TCP   动态主机配置协议 DHCP 67/68 UDP    简单网络管理协议 SNMP 161/162 UDP    文件传送协议 FTP 20/21 TCP 控制连接 21，数据连接 20   远程终端协议 TELNET 23 TCP    超文本传送协议 HTTP 80 TCP    简单邮件传送协议 SMTP 25 TCP    邮件读取协议 POP3 110 TCP    网际报文存取协议 IMAP 143 TCP    超文本传送协议 HTTPS 443 TCP      域名系统 DNS ( Domain Name System ) 是一个分布式数据库，提供了主机名和 IP 地址之间相互转换的服务。这里的分布式数据库是指，每个站点只保留它自己的那部分数据。</description>
    </item>
    
    <item>
      <title>Java - JVM GC</title>
      <link>https://winterorch.github.io/p/java-jvm-ram_and_gc/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winterorch.github.io/p/java-jvm-ram_and_gc/</guid>
      <description>一、垃圾收集算法  下面这张图中存在 Permanent Space ，因此明显是基于 JDK 1.8 以前版本画的，在之后版本，元空间取代了永久代成为了 HotSpot 对方法区的实现
  JDK1.8以前的Java堆分代 
跟据 Object 生命周期分为三个层次
 Young Generation Old Generation Permanent Generation  Young Generation 包括 Eden 区和两个存活区（From 和 To），采用“停止-复制（Stop-and-copy）”清理法。大部分对象在 Eden 区域分配，一次新生代垃圾回收后如果对象还存活，则升1岁进入 s0 或 s1 ，清理 Eden 和使用过的一块 Survivor。
 HotSpot 虚拟机的 Eden 和 Survivor 大小比例默认为 8:1，保证内存利用率有 90%。
 Eden 区满时执行 Minor GC 清理可销毁对象，将不可销毁的迁移至其中一个存活区，而将另一个存活区直接清空，下一次 GC 时两个存活区角色交换，交换次数超过 15 （MaxTenuringThreshold）的进入 Old Generation。
 复制算法（young代GC算法）
该算法会将内存区域分为两个大小一样的区域。GC回收时，遍历当前使用区域，只将正在引用的对象复制到另一个区域，因此复制成本较低，且复制过程中还会进行内存整理，不会出现“碎片”问题。缺点就是：需要两个大小一样的内存区域和生命周期短的对象。所以该算法不适合大内存对象和长生命周期的对象，适用于young代的SO/S1
  Hotspot 的动态年龄阈值</description>
    </item>
    
  </channel>
</rss>
