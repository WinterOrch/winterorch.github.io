<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RabbitMQ on 图拉国营噄茶馆</title>
    <link>https://winterorch.github.io/categories/rabbitmq/</link>
    <description>Recent content in RabbitMQ on 图拉国营噄茶馆</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 07 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://winterorch.github.io/categories/rabbitmq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RabbitMQ - 基本概念和 SpringBoot 下的使用</title>
      <link>https://winterorch.github.io/p/rabbitmq-basic/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winterorch.github.io/p/rabbitmq-basic/</guid>
      <description>生产者通过指定 RoutingKey (路由键) 指定消息路由规则。示例为 Spring AMQP 中 RabbitMQ 的使用。
 Spring AMQP 文档：https://docs.spring.io/spring-amqp/docs/current/reference/html/
 Exchange Types （交换器类型）   fanout
最快的路由规则，Exchange 将所有接收到消息发送导与其绑定的所有队列中，不做任何判断操作，即使绑了路由键也会直接无视，常用来广播消息/** * Fanout */ @Bean public FanoutExchange fanoutExc() { return new FanoutExchange(FANOUT_EXCHANGE); } @Bean public Binding fanoutBinding1(Queue topicQueue1, FanoutExchange fanoutExc) { return BindingBuilder.bind(topicQueue1).to(fanoutExc); } @Bean public Binding fanoutBinding2(Queue topicQueue2, FanoutExchange fanoutExc) { return BindingBuilder.bind(topicQueue2).to(fanoutExc); }   direct
将消息路由到 BindingKey 与 RoutingKey 完全匹配的队列中，常用来将有优先级的任务发到对应队列，得到更多处理资源  topic
将消息路由到 BindingKey 和 RoutingKey 相匹配的队列中，但这里的匹配规则有些不同，它约定：</description>
    </item>
    
  </channel>
</rss>
