<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java基础 on 图拉国营噄茶馆</title>
    <link>https://winterorch.github.io/categories/java%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in Java基础 on 图拉国营噄茶馆</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 11 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://winterorch.github.io/categories/java%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java - JVM 字符串</title>
      <link>https://winterorch.github.io/p/java-jvm-string_pool/</link>
      <pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winterorch.github.io/p/java-jvm-string_pool/</guid>
      <description>大部分内容来源这篇美团的文章：https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html，原文非常有深度，这里只捡了一些比较浅的东西出来
JDK6到7的字符串常量池出现了很大变化，为了防止绕晕，这里只拿了7以后的情况出来
   直接用双引号声明的 String 对象直接存到常量池
  用 intern 方法会从字符串常量池查询当前字符串是否存在，若不存在则将当前字符串放入常量池
  new 一个字符串出来最多会生成两个对象
 字符串常量池中的引用对象 Java Heap 中的String对象  当然，如果常量池中原本已经存在了被引用对象，则只会多生成一个对象
  字符串常量池 字符串常量池的主体是一个 StringTable 。
HotSpot VM中使用全局表StringTable记录interned string，StringTable 的 intern 方法类似 HashMap ，本质是HashSet&amp;lt;String&amp;gt;，但不能自动扩容，（JDK6）默认大小 1009，（JDK7）通过-XX:StringTableSize=99991参数指定，默认大小 60013。StringTable只存储对String实例的引用。
 加载字节码文件时，常量（&amp;quot;&amp;quot;圈起来的就是字符串常量）会被加载到运行时常量池 (Runtime Constant Pool) 中，字符串此时只有 CONSTANT_Utf8 ，采用 Lazy-Init ，因此未成为 Java 对象，运行到对应位置再进行对象加载。  类加载阶段
HotSpot VM 在类加载阶段，JVM会创建常量池中的字符串对象实例，但这一过程是惰性的，加载时仅将字面量放入类的运行时常量池，即 CONSTANT_Utf8，而 CONSTANT_String 还没有，也不会进入字符串常量池。（当然静态变量会直接被指定初始值，也就会创建字符串对象，同时保存引用到字符串常量池）
intern() JDK7中，intern() 方法将在字符串池中保存堆中的引用并返回（如果已经有则直接返回该引用）。对执行方法的对象本身不会造成任何影响，该指哪指哪。以下为例：
String s3 = new String(&amp;#34;1&amp;#34;) + new String(&amp;#34;1&amp;#34;); s3.</description>
    </item>
    
    <item>
      <title>Java - JVM 问题集合 (下)</title>
      <link>https://winterorch.github.io/p/java-jvm-questions_2/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winterorch.github.io/p/java-jvm-questions_2/</guid>
      <description>内存、对象、JVM优化相关问题 指令重排序与 happens-before 原则  https://www.jianshu.com/p/b9186dbebe8e
 问题的起因还是指令重排序，重排序之所以存在是因为有多级缓存，线程所作变更先在寄存器或本地缓存完成，然后拷贝到主存以跨越内存栅栏（即完成工作内存到主存间的拷贝动作），跨越序列或顺序称为happens-before。仅当写操作线程先跨越内存栅栏，读线程后跨越内存栅栏，写操作线程所作变更才对其它线程可见。
 程序次序规则： 在一个单独的线程中，按照程序代码的执行流顺序，（时间上）先执行的操作happen—before（时间上）后执行的操作 （同一个线程中前面的所有写操作对后面的操作可见） 管理锁定规则：一个unlock操作happen—before后面（时间上的先后顺序）对同一个锁的lock操作。 （如果线程1解锁了monitor a，接着线程2锁定了a，那么，线程1解锁a之前的写操作都对线程2可见（线程1和线程2可以是同一个线程）） volatile变量规则：对一个volatile变量的写操作happen—before后面（时间上）对该变量的读操作。 （如果线程1写入了volatile变量v（临界资源），接着线程2读取了v，那么，线程1写入v及之前的写操作都对线程2可见（线程1和线程2可以是同一个线程）） 线程启动规则：Thread.start()方法happen—before调用用start的线程前的每一个操作。 （假定线程A在执行过程中，通过执行ThreadB.start()来启动线程B，那么线程A对共享变量的修改在接下来线程B开始执行前对线程B可见。注意：线程B启动之后，线程A在对变量修改线程B未必可见。） 线程终止规则：线程的所有操作都happen—before对此线程的终止检测，可以通过Thread.join（）方法结束、Thread.isAlive（）的返回值等手段检测到线程已经终止执行。 (线程t1写入的所有变量，在任意其它线程t2调用t1.join()，或者t1.isAlive() 成功返回后，都对t2可见。) 线程中断规则：对线程interrupt()的调用 happen—before 发生于被中断线程的代码检测到中断时事件的发生。 (线程t1写入的所有变量，调用Thread.interrupt()，被打断的线程t2，可以看到t1的全部操作) 对象终结规则：一个对象的初始化完成（构造函数执行结束）happen—before它的finalize（）方法的开始。 (对象调用finalize()方法时，对象初始化完成的任意操作，同步到全部主存同步到全部cache。) 传递性：如果操作A happen—before操作B，操作B happen—before操作C，那么可以得出A happen—before操作C。   内存泄漏 JVM通过引用计数法和可达性分析算法来判断对象是否可以被GC，对象长时间没有被GC一般是JVM误以为对象还在引用中，无法回收，即长期存活对象引用短期存活对象，常见的情况包括：
 静态集合类（短生命周期对象）被长生命周期持有引用 各种连接（数据库、网络连接、IO）没有线性关闭，造成对象无法被回收 变量定义作用范围过大 内部类持有外部类，内部类长期被持有，导致外部类对象无法被回收 哈希表中，如果对象哈希值与最初存入时不同，则会导致找不到对象结果，造成泄漏 一些数据结构，如手写栈，在栈不断增长、收缩后，如果不手工清空（引用置null），弹出对象有可能不被GC，造成隐蔽的内存泄漏 缓存结构中，有些对象写入后很可能就再也没有被删除或使用，造成缓存泄漏。WeakHashMap 就是为此诞生的，没有除自身外其它引用的值会被丢弃 监听器和回调，如果注册后没有显示取消就会积聚起来，比较简单的解决方法也是使用弱引用  因此总结下来，防止内存泄漏的办法包括：避免长期存活对象持有不必要的短期对象引用；不使用资源即时回收，尤其是连接、手工数据结构中；难以判断是否可以回收的缓存资源，可以通过弱引用防止内存泄漏。
 Java 中的四种引用类型 不同引用类型体现为对象不同的可达性状态和对垃圾收集的影响。
 强引用就是最常见引用，垃圾收集器不会处理强引用指向的对象，但只要超过了引用的作用域，或显式地赋值为null就可以被回收 软引用相对强引用弱化一些，只有JVM认为内存不足（由JVM进行判定，不同JVM不同模式下对剩余空间的考量不同）时才会取试图回收软引用指向对象，因此可以用于缓存 弱引用指向对象完全不能从GC豁免，仅提供访问在弱引用状态下对象的途径，可以用来维护非强制的映射关系，如果还在就获取，否则重现实例化，也可以用于缓存 虚引用不能被用来访问对象，仅提供确保对象被finalize后做某些事的机制，比如 Post-Mortem 清理机制，Cleaner，监控对象的创建和销毁  引用的可达性可以进行流转，除了虚引用外的引用都可以通过get方法获取原有对象，从而重新指向强引用，人为改变对象的可达性状态。
但是如果错误地保持了强引用，那对象就没有机会变回弱引用可达性状态了，就会产生内存泄露。
 Native 关键字 用于告诉 JVM 调用的是本地 C/C++ 方法，因此不能 abstract。使用 JNI 加载动态或静态库时会需要用到这个方法。常见的如 hashCode() 、NIO 中 epoll 相关的内核操作都需要调用本地方法。</description>
    </item>
    
    <item>
      <title>Java - JVM 问题集合 (上)</title>
      <link>https://winterorch.github.io/p/java-jvm-questions_1/</link>
      <pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winterorch.github.io/p/java-jvm-questions_1/</guid>
      <description>JVM 内存结构、类加载相关问题 HotSpot 是什么 使用最广泛的 JVM，OpenJDK SunJDK 的 JVM。最早不是 Java 的虚拟机，在 JIT 方面具有一些先进的理念，被 SUN 收购。
 堆和栈区别是什么 个人理解，不一定全面：
   堆 栈     公有 线程私有   存放绝大多数对象实例、数组 存放局部变量表、操作数栈、动态链接、方法出口等   GC的主要场所 不需要GC，栈帧随方法调用结束而被弹出   生老病死与JVM紧密相关 生老病死与线程、函数调用紧密相关   不能动态扩容 可以通过配置动态扩容     哪块内存区不会OOM 公有部分： 堆，会OOM；方法区，虽然搬到了原生内存上，但还是有可能OOM的；JVM外的直接内存，肯定是可能OOM的。因此公有区全部有可能OOM。
线程私有部分： 本地方法栈，为 Native 方法服务，也有OOM可能；虚拟机栈，OOM常客，允许动态扩容时会OOM，不允许则会 OverFlow，因此是会OOM的；程序寄存器，唯一不会出现OOM的区域，就是它。
 一个线程OOM后，其它线程能否运行 无论哪种OOM，一个线程OOM后，所占据内存资源会被GC全部释放。无论是线程共享的堆内存，还是不共享的栈内存。
因此，一个线程的OOM不会影响到其它线程运行，即使主线程抛异常退出，子线程仍能继续，除非子线程是主线程的守护线程。
 对象一定是在堆上分配的吗 不一定。JVM通过逃逸分析，能够分析新对象的适用范围，以此确定是否要将对象分配到堆上，对于没有逃逸出方法的对象，很可能会被优先在栈上进行分配。
 其实就像我们平常用Spring，有必要将所有对象都注册成Bean吗？肯定没必要，JVM也不傻，并非所有对象都会分配到堆上，毕竟GC也是有开销的。
  为什么说一次编译，处处执行 两次编译机制，第一次由编译器编译成字节码，第二次由JVM转换到机器码，实际上是解释执行机制，解释工作由本地JVM完成，JVM担任了本地向导的责任，因此不是“处处执行”，是有本地向导，装了JVM的地方执行。</description>
    </item>
    
    <item>
      <title>Java - 接口与抽象类的区别</title>
      <link>https://winterorch.github.io/p/java-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Wed, 02 Jun 2021 20:04:58 +0130</pubDate>
      
      <guid>https://winterorch.github.io/p/java-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>先简单过一下接口语法中的注意点。
注意点   接口中的变量隐式指定为 public static final
  接口中的方法会被隐式指定为 public abstract （JDK 1.9 后允许 private，其它修饰符会报错）
 这也决定了接口中所有方法都必须被实现，当然这一要求有两种特殊的满足方式——抽象类实现接口，那么接口方法不一定要实现，可以由抽象类的子类实现；JDK 1.8 后有默认实现的接口方法也不必被实现类显式实现。
   接口不能有构造方法
  JDK 1.8 后，接口可以有静态方法和方法体
  JDK 1.8 后，接口方法可以有默认方法，用 default 关键字修饰
  与抽象类语法上的区别   一个类可以实现多个接口
  一个接口可以继承多个其它接口
Java 接口是对行为的抽象，一个行为本身可以看作多个行为的耦合
public interface Hockey extends Sports, Event    接口与抽象类区别 接口和抽象类语法上的不同在之前两个文档中都已经接释清楚了，这里主要看两者思想上的不同。
摘取一些《Effective Java》中的说法
 接口是对行为的抽象，达到 API 定义与实现分类 的目的，因此支持多实现。甚至可以用没有任何方法的接口，作为 Marker Interface，目的仅仅是进行声明。但是用接口导出常量是不合适的使用，接口应当尽量减少细节泄露，常量应当由类保管。
相较之下，抽象类的主要目的是 代码重用，本质是不能实例化的类。</description>
    </item>
    
    <item>
      <title>Java - 抽象类</title>
      <link>https://winterorch.github.io/p/java-%E6%8A%BD%E8%B1%A1%E7%B1%BB/</link>
      <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winterorch.github.io/p/java-%E6%8A%BD%E8%B1%A1%E7%B1%BB/</guid>
      <description>语法 抽象类中可以存在
 构造方法 抽象方法 非抽象方法 成员变量 静态成员变量  总结：除了不能被实例化，抽象类几乎具有普通类的所有特性。
 注意点   抽象类不能被实例化，如果试图实例化抽象类，编译无法通过
  抽象类中可以有构造方法，但是构造方法不能为抽象方法，其中原因见 [为什么构造函数不能为抽象]
 抽象类及其实现的构造方法也必须遵循一般继承中的构造方法规范，包括：
 子类实例化对象时，如果子类构造方法没有显式调用父类构造方法，默认调用 super() 子类要使用父类有参构造方法，使用 super(...) 形式，且 super() 必须是子类构造方法中第一行语句 父类没有不带参构造方法（只定义了有参构造方法而没有定义无参的），子类构造方法中必须显示调用父类其它构造方法，否则编译不过     抽象类中的静态方法也不能为抽象方法
  抽象类中的抽象方法只能声明，不能有具体实现，这与接口不同（接口方法在 JDK 1.8 后也可以有默认实现），具体原因见 [为什么抽象方法不能有实现而接口方法可以]
   有端联想 抽象类总结了几个比较有嚼劲的问题
1. 为什么构造函数不能为抽象 Java 抽象函数 和 C++ 虚函数 是等价概念，因此这里直接从 C++ 的角度找答案了。结论就是——构造函数从语言和逻辑来看都不能为虚函数。
  从内存结构角度来看
虚函数对应虚函数表 vtable ，表为类所有，但虚函数表指针为每个对象所有，在构造函数运行时进行空间分配，因此构造函数无法在未创建虚表指针的情况下调用虚表。
  从语言逻辑角度来看
构造函数目的是初始化实例，我们知道抽象类和虚基类都没有实例化的需求，将构造函数定义为虚函数是没有意义的。
可以先回顾一下虚函数的作用过程——通过指针或者引用来调用虚函数的时候能够调用到子类的对应成员函数。而构造函数是在创建对象时自动调用的，调用这一函数的指针或引用所对应的对象还不存在，也就决定了构造函数不能是虚函数。
  2.</description>
    </item>
    
    <item>
      <title>Java - JVM GC</title>
      <link>https://winterorch.github.io/p/java-jvm-ram_and_gc/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winterorch.github.io/p/java-jvm-ram_and_gc/</guid>
      <description>一、垃圾收集算法  下面这张图中存在 Permanent Space ，因此明显是基于 JDK 1.8 以前版本画的，在之后版本，元空间取代了永久代成为了 HotSpot 对方法区的实现
  JDK1.8以前的Java堆分代 
跟据 Object 生命周期分为三个层次
 Young Generation Old Generation Permanent Generation  Young Generation 包括 Eden 区和两个存活区（From 和 To），采用“停止-复制（Stop-and-copy）”清理法。大部分对象在 Eden 区域分配，一次新生代垃圾回收后如果对象还存活，则升1岁进入 s0 或 s1 ，清理 Eden 和使用过的一块 Survivor。
 HotSpot 虚拟机的 Eden 和 Survivor 大小比例默认为 8:1，保证内存利用率有 90%。
 Eden 区满时执行 Minor GC 清理可销毁对象，将不可销毁的迁移至其中一个存活区，而将另一个存活区直接清空，下一次 GC 时两个存活区角色交换，交换次数超过 15 （MaxTenuringThreshold）的进入 Old Generation。
 复制算法（young代GC算法）
该算法会将内存区域分为两个大小一样的区域。GC回收时，遍历当前使用区域，只将正在引用的对象复制到另一个区域，因此复制成本较低，且复制过程中还会进行内存整理，不会出现“碎片”问题。缺点就是：需要两个大小一样的内存区域和生命周期短的对象。所以该算法不适合大内存对象和长生命周期的对象，适用于young代的SO/S1
  Hotspot 的动态年龄阈值</description>
    </item>
    
  </channel>
</rss>
